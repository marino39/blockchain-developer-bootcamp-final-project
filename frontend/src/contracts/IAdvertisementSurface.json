{
  "contractName": "IAdvertisementSurface",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc20",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minBid",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAdvertisementSurfacePayments.PaymentInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc20",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minBid",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAdvertisementSurfacePayments.PaymentInfo",
          "name": "_paymentInfo",
          "type": "tuple"
        }
      ],
      "name": "setPaymentInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "erc20",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minBid",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAdvertisementSurfacePayments.PaymentInfo",
          "name": "_paymentInfo",
          "type": "tuple"
        }
      ],
      "name": "registerAdvertisementSurface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "advertisementSurfaceExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"advertisementSurfaceExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPaymentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdvertisementSurfacePayments.PaymentInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdvertisementSurfacePayments.PaymentInfo\",\"name\":\"_paymentInfo\",\"type\":\"tuple\"}],\"name\":\"registerAdvertisementSurface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdvertisementSurfacePayments.PaymentInfo\",\"name\":\"_paymentInfo\",\"type\":\"tuple\"}],\"name\":\"setPaymentInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marcin Gorzynski\",\"kind\":\"dev\",\"methods\":{\"advertisementSurfaceExists(uint256)\":{\"params\":{\"_tokenId\":\"The id of the advertisement surface\"},\"returns\":{\"_0\":\"If token id exists\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"registerAdvertisementSurface(string,(address,uint256))\":{\"params\":{\"_paymentInfo\":\"The advertisement surface payment structure\",\"_tokenURI\":\"The advertisement surface token id\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"The Advertisement Surface NFT interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"advertisementSurfaceExists(uint256)\":{\"notice\":\"The function that checks is given tokenId exists\"},\"registerAdvertisementSurface(string,(address,uint256))\":{\"notice\":\"The function that tokenize the advertisement surface. Once activated advertisement time slots can be auctioned to clients.\"}},\"notice\":\"The contract used to tokenize advertisement infrastructure and bid on it's usage.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurface.sol\":\"IAdvertisementSurface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e7820bcf567e6892d937c3cb10db263a4042e446799bca602535868d822384e\",\"dweb:/ipfs/QmPG2oeDjKncqsEeyYGjAN7CwAJmMgHterXGGnpzhha4z7\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d919a0061e43f9878f6171b7f853cb92093805cd1160858c1884195a639b40a0\",\"dweb:/ipfs/QmRZsS3EYuLp75nBym1QQ4y6aQXGew75wSbv1uwqkvouUK\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af63ab940a34687c45f0ad84960b048fc5f49330c92ccb422db7822a444733b9\",\"dweb:/ipfs/QmUShaQEu8HS1GjDnsMJQ8jkZEBrecn6NuDZ3pfjY1gVck\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6\",\"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx\"]},\"project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurface.sol\":{\"keccak256\":\"0x9988d1246be24095038c6bd899f6e2b16974a3164dd2311b8b2ff4cdc9a87628\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d574cfa7c0d8a9697e6328d71d4d73b82e66fa30c4dea13165e5d06c83bcb71\",\"dweb:/ipfs/QmbpbBC4La8cAxoxPt4LpA7jWthZ5hijc9hJqgQnqg8mpY\"]},\"project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurfacePayments.sol\":{\"keccak256\":\"0x03e988486080f3c0263ca9f174c44043dd4556e026c28a80e36bfa799438cfa7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://108751887ef947ccfb31a86020fada8d69558dfbdb81b6e89879a4f974d453a4\",\"dweb:/ipfs/QmQ3Tvhtqyc6PMWFk5ybrKn3TFB8fNwnLzLASdGpN5dtp8\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport \"./IAdvertisementSurfacePayments.sol\";\n\n/// @author Marcin Gorzynski\n/// @title The Advertisement Surface NFT interface\n/// @notice The contract used to tokenize advertisement infrastructure and bid on it's usage.\ninterface IAdvertisementSurface is IAdvertisementSurfacePayments, IERC721Metadata, IERC721Enumerable {\n\n    /// @notice The function that tokenize the advertisement surface. Once activated\n    /// advertisement time slots can be auctioned to clients.\n    /// @param _tokenURI The advertisement surface token id\n    /// @param _paymentInfo The advertisement surface payment structure\n    function registerAdvertisementSurface(string memory _tokenURI, PaymentInfo memory _paymentInfo) external;\n\n    /// @notice The function that checks is given tokenId exists\n    /// @param _tokenId The id of the advertisement surface\n    /// @return If token id exists\n    function advertisementSurfaceExists(uint256 _tokenId) external view returns (bool);\n\n}",
  "sourcePath": "/Users/marcin/Prywatne/dAdvrtMarket/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurface.sol",
  "ast": {
    "absolutePath": "project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurface.sol",
    "exportedSymbols": {
      "IAdvertisementSurface": [
        3867
      ],
      "IAdvertisementSurfacePayments": [
        4018
      ],
      "IERC165": [
        2109
      ],
      "IERC721": [
        1009
      ],
      "IERC721Enumerable": [
        1524
      ],
      "IERC721Metadata": [
        1551
      ]
    },
    "id": 3868,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3839,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:17"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
        "id": 3840,
        "nodeType": "ImportDirective",
        "scope": 3868,
        "sourceUnit": 1525,
        "src": "57:79:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 3841,
        "nodeType": "ImportDirective",
        "scope": 3868,
        "sourceUnit": 1552,
        "src": "137:77:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurfacePayments.sol",
        "file": "./IAdvertisementSurfacePayments.sol",
        "id": 3842,
        "nodeType": "ImportDirective",
        "scope": 3868,
        "sourceUnit": 4019,
        "src": "216:45:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3844,
              "name": "IAdvertisementSurfacePayments",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4018,
              "src": "472:29:17"
            },
            "id": 3845,
            "nodeType": "InheritanceSpecifier",
            "src": "472:29:17"
          },
          {
            "baseName": {
              "id": 3846,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1551,
              "src": "503:15:17"
            },
            "id": 3847,
            "nodeType": "InheritanceSpecifier",
            "src": "503:15:17"
          },
          {
            "baseName": {
              "id": 3848,
              "name": "IERC721Enumerable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1524,
              "src": "520:17:17"
            },
            "id": 3849,
            "nodeType": "InheritanceSpecifier",
            "src": "520:17:17"
          }
        ],
        "contractDependencies": [
          1009,
          1524,
          1551,
          2109,
          4018
        ],
        "contractKind": "interface",
        "documentation": {
          "id": 3843,
          "nodeType": "StructuredDocumentation",
          "src": "263:174:17",
          "text": "@author Marcin Gorzynski\n @title The Advertisement Surface NFT interface\n @notice The contract used to tokenize advertisement infrastructure and bid on it's usage."
        },
        "fullyImplemented": false,
        "id": 3867,
        "linearizedBaseContracts": [
          3867,
          1524,
          1551,
          1009,
          2109,
          4018
        ],
        "name": "IAdvertisementSurface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3850,
              "nodeType": "StructuredDocumentation",
              "src": "545:274:17",
              "text": "@notice The function that tokenize the advertisement surface. Once activated\n advertisement time slots can be auctioned to clients.\n @param _tokenURI The advertisement surface token id\n @param _paymentInfo The advertisement surface payment structure"
            },
            "functionSelector": "c9d13d06",
            "id": 3858,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerAdvertisementSurface",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3856,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3852,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 3858,
                  "src": "862:23:17",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3851,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "862:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3855,
                  "mutability": "mutable",
                  "name": "_paymentInfo",
                  "nodeType": "VariableDeclaration",
                  "scope": 3858,
                  "src": "887:31:17",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInfo_$4001_memory_ptr",
                    "typeString": "struct IAdvertisementSurfacePayments.PaymentInfo"
                  },
                  "typeName": {
                    "id": 3854,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3853,
                      "name": "PaymentInfo",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4001,
                      "src": "887:11:17"
                    },
                    "referencedDeclaration": 4001,
                    "src": "887:11:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInfo_$4001_storage_ptr",
                      "typeString": "struct IAdvertisementSurfacePayments.PaymentInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "861:58:17"
            },
            "returnParameters": {
              "id": 3857,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "928:0:17"
            },
            "scope": 3867,
            "src": "824:105:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3859,
              "nodeType": "StructuredDocumentation",
              "src": "935:155:17",
              "text": "@notice The function that checks is given tokenId exists\n @param _tokenId The id of the advertisement surface\n @return If token id exists"
            },
            "functionSelector": "5f5b6ad4",
            "id": 3866,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "advertisementSurfaceExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3861,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 3866,
                  "src": "1131:16:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3860,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1131:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1130:18:17"
            },
            "returnParameters": {
              "id": 3865,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3864,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3866,
                  "src": "1172:4:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3863,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1172:4:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1171:6:17"
            },
            "scope": 3867,
            "src": "1095:83:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3868,
        "src": "437:744:17"
      }
    ],
    "src": "32:1149:17"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurface.sol",
    "exportedSymbols": {
      "IAdvertisementSurface": [
        3867
      ],
      "IAdvertisementSurfacePayments": [
        4018
      ],
      "IERC165": [
        2109
      ],
      "IERC721": [
        1009
      ],
      "IERC721Enumerable": [
        1524
      ],
      "IERC721Metadata": [
        1551
      ]
    },
    "id": 3868,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3839,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:17"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
        "id": 3840,
        "nodeType": "ImportDirective",
        "scope": 3868,
        "sourceUnit": 1525,
        "src": "57:79:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 3841,
        "nodeType": "ImportDirective",
        "scope": 3868,
        "sourceUnit": 1552,
        "src": "137:77:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/AdvertisementMarket/AdvertisementSurface/IAdvertisementSurfacePayments.sol",
        "file": "./IAdvertisementSurfacePayments.sol",
        "id": 3842,
        "nodeType": "ImportDirective",
        "scope": 3868,
        "sourceUnit": 4019,
        "src": "216:45:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3844,
              "name": "IAdvertisementSurfacePayments",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 4018,
              "src": "472:29:17"
            },
            "id": 3845,
            "nodeType": "InheritanceSpecifier",
            "src": "472:29:17"
          },
          {
            "baseName": {
              "id": 3846,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1551,
              "src": "503:15:17"
            },
            "id": 3847,
            "nodeType": "InheritanceSpecifier",
            "src": "503:15:17"
          },
          {
            "baseName": {
              "id": 3848,
              "name": "IERC721Enumerable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1524,
              "src": "520:17:17"
            },
            "id": 3849,
            "nodeType": "InheritanceSpecifier",
            "src": "520:17:17"
          }
        ],
        "contractDependencies": [
          1009,
          1524,
          1551,
          2109,
          4018
        ],
        "contractKind": "interface",
        "documentation": {
          "id": 3843,
          "nodeType": "StructuredDocumentation",
          "src": "263:174:17",
          "text": "@author Marcin Gorzynski\n @title The Advertisement Surface NFT interface\n @notice The contract used to tokenize advertisement infrastructure and bid on it's usage."
        },
        "fullyImplemented": false,
        "id": 3867,
        "linearizedBaseContracts": [
          3867,
          1524,
          1551,
          1009,
          2109,
          4018
        ],
        "name": "IAdvertisementSurface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3850,
              "nodeType": "StructuredDocumentation",
              "src": "545:274:17",
              "text": "@notice The function that tokenize the advertisement surface. Once activated\n advertisement time slots can be auctioned to clients.\n @param _tokenURI The advertisement surface token id\n @param _paymentInfo The advertisement surface payment structure"
            },
            "functionSelector": "c9d13d06",
            "id": 3858,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerAdvertisementSurface",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3856,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3852,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nodeType": "VariableDeclaration",
                  "scope": 3858,
                  "src": "862:23:17",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3851,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "862:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3855,
                  "mutability": "mutable",
                  "name": "_paymentInfo",
                  "nodeType": "VariableDeclaration",
                  "scope": 3858,
                  "src": "887:31:17",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_PaymentInfo_$4001_memory_ptr",
                    "typeString": "struct IAdvertisementSurfacePayments.PaymentInfo"
                  },
                  "typeName": {
                    "id": 3854,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3853,
                      "name": "PaymentInfo",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4001,
                      "src": "887:11:17"
                    },
                    "referencedDeclaration": 4001,
                    "src": "887:11:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PaymentInfo_$4001_storage_ptr",
                      "typeString": "struct IAdvertisementSurfacePayments.PaymentInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "861:58:17"
            },
            "returnParameters": {
              "id": 3857,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "928:0:17"
            },
            "scope": 3867,
            "src": "824:105:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3859,
              "nodeType": "StructuredDocumentation",
              "src": "935:155:17",
              "text": "@notice The function that checks is given tokenId exists\n @param _tokenId The id of the advertisement surface\n @return If token id exists"
            },
            "functionSelector": "5f5b6ad4",
            "id": 3866,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "advertisementSurfaceExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3861,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 3866,
                  "src": "1131:16:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3860,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1131:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1130:18:17"
            },
            "returnParameters": {
              "id": 3865,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3864,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 3866,
                  "src": "1172:4:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3863,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1172:4:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1171:6:17"
            },
            "scope": 3867,
            "src": "1095:83:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3868,
        "src": "437:744:17"
      }
    ],
    "src": "32:1149:17"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.0+commit.c7dfd78e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-11-07T16:40:07.816Z",
  "devdoc": {
    "author": "Marcin Gorzynski",
    "kind": "dev",
    "methods": {
      "advertisementSurfaceExists(uint256)": {
        "params": {
          "_tokenId": "The id of the advertisement surface"
        },
        "returns": {
          "_0": "If token id exists"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "registerAdvertisementSurface(string,(address,uint256))": {
        "params": {
          "_paymentInfo": "The advertisement surface payment structure",
          "_tokenURI": "The advertisement surface token id"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "The Advertisement Surface NFT interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "advertisementSurfaceExists(uint256)": {
        "notice": "The function that checks is given tokenId exists"
      },
      "registerAdvertisementSurface(string,(address,uint256))": {
        "notice": "The function that tokenize the advertisement surface. Once activated advertisement time slots can be auctioned to clients."
      }
    },
    "notice": "The contract used to tokenize advertisement infrastructure and bid on it's usage.",
    "version": 1
  }
}